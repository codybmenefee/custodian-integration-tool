"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./src/utils/globalErrorHandler.ts":
/*!*****************************************!*\
  !*** ./src/utils/globalErrorHandler.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleGlobalError: () => (/* binding */ handleGlobalError),\n/* harmony export */   initializeErrorMonitoring: () => (/* binding */ initializeErrorMonitoring),\n/* harmony export */   initializeGlobalErrorHandlers: () => (/* binding */ initializeGlobalErrorHandlers),\n/* harmony export */   isOnline: () => (/* binding */ isOnline),\n/* harmony export */   loadQueuedErrors: () => (/* binding */ loadQueuedErrors),\n/* harmony export */   monitorNetworkConnectivity: () => (/* binding */ monitorNetworkConnectivity),\n/* harmony export */   registerGlobalErrorHandler: () => (/* binding */ registerGlobalErrorHandler)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/../node_modules/next/dist/build/polyfills/process.js\");\n/**\n * Global error handler for unhandled exceptions and rejections\n * Integrated with error monitoring services like Sentry\n */ // Import Sentry types if available, otherwise define minimal needed types\n// Available handlers\nconst handlers = [];\n/**\n * Initialize global error handlers for the application\n * Should be called once at application startup\n */ function initializeGlobalErrorHandlers() {\n    // Handle unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event)=>{\n        const error = event.reason instanceof Error ? event.reason : new Error(String(event.reason));\n        handleGlobalError(error, 'Unhandled Promise Rejection');\n    });\n    // Handle uncaught exceptions\n    window.addEventListener('error', (event)=>{\n        handleGlobalError(event.error || new Error(event.message), 'Uncaught Exception');\n        // Prevent default browser error handling\n        event.preventDefault();\n    });\n    // Log initialization\n    console.info('Global error handlers initialized');\n}\n/**\n * Handle a global error by passing it to all registered handlers\n * @param error The error object\n * @param info Additional information about the error context\n */ function handleGlobalError(error, info) {\n    console.error(\"Global Error (\".concat(info, \"):\"), error);\n    // Call all registered handlers\n    handlers.forEach((handler)=>{\n        try {\n            handler(error, info);\n        } catch (handlerError) {\n            // Don't let handler errors crash the application\n            console.error('Error in error handler:', handlerError);\n        }\n    });\n}\n// Expose the handleGlobalError function for testing\nif (false) {}\n/**\n * Register a new error handler to process global errors\n * @param handler The handler function to register\n * @returns A function to unregister the handler\n */ function registerGlobalErrorHandler(handler) {\n    handlers.push(handler);\n    // Return function to unregister the handler\n    return ()=>{\n        const index = handlers.indexOf(handler);\n        if (index !== -1) {\n            handlers.splice(index, 1);\n        }\n    };\n}\n/**\n * Check if the application is currently online\n * @returns True if the application has network connectivity\n */ function isOnline() {\n    return typeof navigator !== 'undefined' && navigator.onLine;\n}\n/**\n * Monitor network connectivity and trigger handlers when status changes\n * @param onOffline Function to call when app goes offline\n * @param onOnline Function to call when app comes back online\n * @returns Function to stop monitoring\n */ function monitorNetworkConnectivity(onOffline, onOnline) {\n    const handleOffline = ()=>{\n        console.warn('Network connection lost');\n        if (onOffline) onOffline();\n    };\n    const handleOnline = ()=>{\n        console.info('Network connection restored');\n        if (onOnline) onOnline();\n    };\n    window.addEventListener('offline', handleOffline);\n    window.addEventListener('online', handleOnline);\n    // Return cleanup function\n    return ()=>{\n        window.removeEventListener('offline', handleOffline);\n        window.removeEventListener('online', handleOnline);\n    };\n}\nconst errorQueue = [];\n/**\n * Add an error to the offline queue\n * @param error The error event to queue\n */ function addToErrorQueue(error) {\n    errorQueue.push({\n        error,\n        timestamp: Date.now()\n    });\n    // Cap the queue size to prevent memory issues\n    if (errorQueue.length > 100) {\n        errorQueue.shift();\n    }\n    // Persist queue to localStorage if available\n    try {\n        localStorage.setItem('errorQueue', JSON.stringify(errorQueue));\n    } catch (e) {\n        console.error('Failed to persist error queue:', e);\n    }\n}\n/**\n * Process queued errors when back online\n */ function processErrorQueue() {\n    if (errorQueue.length === 0) return;\n    // Load Sentry dynamically\n    loadSentry().then((Sentry)=>{\n        console.info(\"Processing \".concat(errorQueue.length, \" queued errors\"));\n        // Process errors with rate limiting\n        const processNext = function() {\n            let index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n            if (index >= errorQueue.length) {\n                // All processed, clear queue\n                errorQueue.length = 0;\n                try {\n                    localStorage.removeItem('errorQueue');\n                } catch (e) {\n                    console.error('Failed to clear error queue from storage:', e);\n                }\n                return;\n            }\n            const { error } = errorQueue[index];\n            Sentry.captureEvent(error);\n            // Process next with slight delay to avoid overwhelming the API\n            setTimeout(()=>processNext(index + 1), 100);\n        };\n        processNext();\n    }).catch((err)=>{\n        console.error('Failed to process error queue:', err);\n    });\n}\n/**\n * Load queued errors from localStorage on startup\n */ function loadQueuedErrors() {\n    try {\n        const storedQueue = localStorage.getItem('errorQueue');\n        if (storedQueue) {\n            const parsedQueue = JSON.parse(storedQueue);\n            errorQueue.push(...parsedQueue);\n            console.info(\"Loaded \".concat(parsedQueue.length, \" errors from queue\"));\n        }\n    } catch (e) {\n        console.error('Failed to load error queue:', e);\n    }\n}\n/**\n * Dynamically load Sentry to avoid bundling it unnecessarily\n * @returns A promise that resolves to the Sentry API\n */ async function loadSentry() {\n    try {\n        const Sentry = await Promise.resolve().then(function webpackMissingModule() { var e = new Error(\"Cannot find module '@sentry/browser'\"); e.code = 'MODULE_NOT_FOUND'; throw e; });\n        return Sentry;\n    } catch (error) {\n        console.error('Failed to load Sentry:', error);\n        throw error;\n    }\n}\n/**\n * Integration with Sentry error monitoring service\n */ function initializeErrorMonitoring() {\n    // Skip in development or test environments if desired\n    if ( true && !process.env.ENABLE_ERROR_MONITORING_IN_DEV) {\n        console.info('Error monitoring disabled in development mode');\n        return;\n    }\n    // Load Sentry dynamically\n    loadSentry().then((Sentry)=>{\n        Sentry.init({\n            dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n            environment: \"development\",\n            tracesSampleRate: 1.0,\n            // Only capture a percentage of sessions in production for performance\n            replaysSessionSampleRate:  false ? 0 : 1.0,\n            // But always capture sessions with errors\n            replaysOnErrorSampleRate: 1.0,\n            // Add more context to errors\n            beforeSend (event) {\n                // Don't send events when offline\n                if (!isOnline()) {\n                    // Queue the event for later sending\n                    addToErrorQueue(event);\n                    return null;\n                }\n                // Add additional context\n                if (event.user) {\n                    // Anonymize user IPs in certain environments\n                    if (process.env.ANONYMIZE_IPS) {\n                        event.user.ip_address = '0.0.0.0';\n                    }\n                }\n                return event;\n            }\n        });\n        // Register a global handler that reports to Sentry\n        registerGlobalErrorHandler((error, info)=>{\n            Sentry.captureException(error, {\n                extra: {\n                    info\n                }\n            });\n        });\n        // Set up network connectivity monitoring\n        monitorNetworkConnectivity(// When going offline, use a breadcrumb\n        ()=>{\n            Sentry.addBreadcrumb({\n                category: 'network',\n                message: 'Network connectivity lost',\n                level: 'warning'\n            });\n        }, // When coming back online, send queued errors\n        ()=>{\n            Sentry.addBreadcrumb({\n                category: 'network',\n                message: 'Network connectivity restored',\n                level: 'info'\n            });\n            processErrorQueue();\n        });\n        console.info('Sentry error monitoring initialized');\n    }).catch((err)=>{\n        console.error('Failed to initialize Sentry:', err);\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/utils/globalErrorHandler.ts\n"));

/***/ })

});